#!/bin/sh

# git-line-history --- Track changes in a line from a file using git.

# Copyright © 2009 2010 2011 Sebastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Last changed: 2011-03-26 02:19:41

# History
# ---------------------------------------------------------------------
# 1.1 : 2018-03-14 ckolumbus@ac-drexler.de
#    * (new) maxrefs option
#    * (new) regex group used for display formatting
#    * (new) head commit is printed in addition
# ---------------------------------------------------------------------

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

VERSION="1.1"

if [ "$#" -lt "2" -o "$#" -gt "3" ] ; then
    echo "Usage: $0 file regexp [maxrefs]"
    echo ""
    echo "file    : filename to be analyzed"
    echo "regexp  : regular expression with exactly one group."
    echo "        : - the complete regex is used for matching the line"
    echo "        : - the group within the regex identifes the portion to be printed" 
    echo "maxrefs : maximum number of refs to be listed (optional, default = 2)"
    exit 1
fi

file=$1
regexp=$2
if [ "$#" == "3" ] ; then
    maxrefs=$3
else
    maxrefs="2"
fi

id=$(git rev-parse HEAD)

line=$(git blame -l -s ${id} $file 2>/dev/null | perl -ne \
    "print \"\$1:\$4\n\" if /^([0-9a-f]{40})\s+(.*\s+)?[0-9]+\)(.*$regexp.*)\$/;")
echo "$line"

counter=1
while [ "$id" != "" -a "$counter" -lt "$maxrefs" ]; do
    line=$(git blame -l -s ${id}^1 $file 2>/dev/null | perl -ne \
	    "print \"\$1:\$4\n\" if /^([0-9a-f]{40})\s+(.*\s+)?[0-9]+\)(.*$regexp.*)\$/;")
    echo "$line"
    id=$(echo $line | cut -f1 -d':')
    let counter=counter+1
done

exit 0
