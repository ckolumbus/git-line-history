#!/usr/bin/sbcl --script
 
(require :asdf)
(require :cl-ppcre)

(defstruct args file regex)

(defun help (&optional (exit-code 0))
  (write-line (format nil "~a FILE REGEX" "git-line-history"))
  (quit :unix-status exit-code))


(defvar args
  (or
   (and (= 3 (length sb-ext:*posix-argv*))
	(make-args
	 :file (nth 1 sb-ext:*posix-argv*)
	 :regex (nth 2 sb-ext:*posix-argv*)))
   (help 1)))


(defun execv (program &optional arg-list (ignore-error t))
  (let ((proc (sb-ext:run-program program arg-list
				  :input nil
				  :output :stream
				  :error :stream)))
    (let ((out (sb-ext:process-output proc))
          (err (sb-ext:process-error proc))
          (code (sb-ext:process-exit-code proc)))
      (if (zerop code)
          (prog1
	      (loop for l = (read-line out nil nil)
		 while l
		 collect l)
            (close out)
            (close err))
	  (unless ignore-error
	    (let ((err-lines 
		   (loop for l = (read-line err nil nil)
		      while l
		      collect l)))
	      (close out)
	      (close err)
	      (error "Something went wrong calling~%~%  ~a ~{'~a' ~};~%~%  the process exit code was ~d.~%  Here is the error output:~%~{~a~%~}" program arg-list code err-lines)))))))


(loop for start-id = 1
   with id = (car (execv "/usr/bin/git"
			 (list "rev-parse" "HEAD")))
   with regexp = (format
		  nil
		  "^([0-9a-f]{40}|\\^[0-9a-f]{39})\\s+[0-9]+\\)\\s+(.*~a.*)$" 
		  (args-regex args))
   while id
   do
     (loop for l in (or
		     (execv "/usr/bin/git"
			    (list "blame" "-l" "-s"
				  (format nil "~a^1" id)
				  (args-file args)))
		     (setf id nil))
	do (progn
	     (let ((str (multiple-value-bind (replaced matchp)
			      (cl-ppcre:regex-replace regexp l  "\\1:\\2")
			  (when matchp replaced))))
	       (when str
		   (write-line (format nil "~a" str))
		   (setf id (car (cl-ppcre:split ":" str))))))))

